/*
 * =============================================================================
 *
 *                   Copyright (c) 2025 BSC
 *                             All rights reserved
 *
 * This file contains BSC proprietary and confidential information and has
 * been developed by BSC within the EPI-SGA1 Project (GA 826647).
 * The permission rights for this file are governed by the EPI Grant Agreement
 * and the EPI Consortium Agreement.
 *
 * ===============================[ INFORMATION ]===============================
 *
 * Author(s)  : Rafel Bros Esqueu
 * Contact(s) : rafel.brosesqueu@bsc.es
 */

/*
 * SiFive P550 RISC-V Core
 */

static const riscv_entry_t riscv_sifive_p550_pe[] = {
  {.name = "core_clock_cycles",
	.code = 0x00000165,
	.desc = "Counts core clock cycles"},
	{.name = "instructions_retired",
	.code = 0x00000265,
	.desc = "Counts instructions retired"},
	{.name = "exception_taken",
	.code = 0x00000100,
	.desc = "Counts exceptions taken"},
	{.name = "integer_load_retired",
	.code = 0x00000200,
	.desc = "Counts integer load instructions retired"},
	{.name = "integer_store_retired",
	.code = 0x00000400,
	.desc = "Counts integer store instructions retired"},
	{.name = "atomic_memory_retired",
	.code = 0x00000800,
	.desc = "Counts atomic memory instructions retired"},
	{.name = "system_instruction_retired",
	.code = 0x00001000,
	.desc = "Counts system instructions retired (CSR, WFI, MRET, etc.)"},
	{.name = "integer_arithmetic_retired",
	.code = 0x00002000,
	.desc = "Counts integer arithmetic instructions retired"},
	{.name = "conditional_branch_retired",
	.code = 0x00004000,
	.desc = "Counts conditional branch instructions retired"},
	{.name = "jal_instruction_retired",
	.code = 0x00008000,
	.desc = "Counts jump-and-link instructions retired"},
	{.name = "jalr_instruction_retired",
	.code = 0x00010000,
	.desc = "Counts indirect jump instructions (JALR) retired"},
	{.name = "integer_multiplication_retired",
	.code = 0x00020000,
	.desc = "Counts integer multiplication instructions retired"},
	{.name = "integer_division_retired",
	.code = 0x00040000,
	.desc = "Counts integer division instructions retired"},
	{.name = "fp_load_retired",
	.code = 0x00080000,
	.desc = "Counts floating-point load instructions retired"},
	{.name = "fp_store_retired",
	.code = 0x00100000,
	.desc = "Counts floating-point store instructions retired"},
	{.name = "fp_add_retired",
	.code = 0x00200000,
	.desc = "Counts floating-point add instructions retired"},
	{.name = "fp_mul_retired",
	.code = 0x00400000,
	.desc = "Counts floating-point multiply instructions retired"},
	{.name = "fp_muladd_retired",
	.code = 0x00800000,
	.desc = "Counts floating-point fused multiply-add instructions retired"},
	{.name = "fp_div_sqrt_retired",
	.code = 0x01000000,
	.desc = "Counts floating point divide or square root instructions retired"},
	{.name = "other_fp_retired",
	.code = 0x02000000,
	.desc = "Counts other floating-point instructions retired"},
	{.name = "icache_miss",
	.code = 0x00000102,
	.desc = "Counts instruction cache misses"},
	{.name = "dcache_miss",
	.code = 0x00000202,
	.desc = "Counts data cache misses"},
	{.name = "dcache_release",
	.code = 0x00000402,
	.desc = "Counts writeback requests from the data cache"},
	{.name = "itlb_miss",
	.code = 0x00000802,
	.desc = "Counts Instruction TLB misses caused by instruction address translation requests"},
	{.name = "dtlb_miss",
	.code = 0x00001002,
	.desc = "Counts Data TLB misses caused by data address translation requests"},
	{.name = "utlb_miss",
	.code = 0x00002002,
	.desc = "Counts Unified TLB misses caused by address translation requests"},
	{.name = "utlb_hit",
	.code = 0x00004002,
	.desc = "Counts Unified TLB hits for address translation requests"},
	{.name = "pte_cache_miss",
	.code = 0x00008002,
	.desc = "Counts Page Table Entry cache misses"},
	{.name = "pte_cache_hit",
	.code = 0x00010002,
	.desc = "Counts Page Table Entry cache hits"},
	{.name = "addressgen_interlock",
	.code = 0x00000101,
	.desc = "Counts cycles with an address-generation interlock"},
	{.name = "longlatency_interlock",
	.code = 0x00000201,
	.desc = "Counts cycles with a long-latency interlock"},
	{.name = "csr_interlock",
	.code = 0x00000401,
	.desc = "Counts cycles with a CSR interlock"},
	{.name = "icache_blocked",
	.code = 0x00000801,
	.desc = "Counts cycles in which the instruction cache was not able to provide an instruction"},
	{.name = "dcache_blocked",
	.code = 0x00001001,
	.desc = "Counts cycles in which the data cache blocked an instruction"},
	{.name = "branch_direction_misprediction",
	.code = 0x00002001,
	.desc = "Counts mispredictions of conditional branch direction (taken/not taken)"},
	{.name = "branch_target_misprediction",
	.code = 0x00004001,
	.desc = "Counts mispredictions of the target PC of control-flow instructions"},
	{.name = "pipeline_flush",
	.code = 0x00008001,
	.desc = "Counts flushes of the core pipeline. Causes include fence.i and CSR accesses"},
	{.name = "replay",
	.code = 0x00010001,
	.desc = "Counts instruction replays"},
	{.name = "integer_mul_div_interlock",
	.code = 0x00020001,
	.desc = "Counts cycles with a multiply or divide interlock"},
	{.name = "fp_interlock",
	.code = 0x00040001,
	.desc = "Counts cycles with a floating-point interlock"},
};
